{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Commands and user manuals : Gui and setup usage Documents all data relative to the usage of the different blocks of the setup, the options to tune them and what they do. Software programmation Maze modules Morj code GUI code Maintenance and fabrication Maze Contains all info and files realtive to the maze electronics, code and mechanical parts. MORJ Contains all info and files realtive to the morj electronics, code and mechanical parts. Genicam Camera Contains all code and docs about genicam and how widefield monitoring video is captured in python during the session. SQL database Contains all documentation of queries, tables, and overall model of the database, as well as some info to deploy a new one if necessary. All 3D models you want to find TIP : You can acess all repos related to 3D files by typing 3D in the searchfield of the organization. All files related to surgeries are available in the repository Surgeries_3D . This includes parts related to windows (contour, pointing, drawing, and pushers to keep windows in place) as well as flexible \"chambers\" for intrinsic imaging. Some files related to surgeries more specific to the S1 implant are available in the folder below. All files related to the implant are available in the repository Implant_3D . This includes head fixation stuff, files sent for production of metal parts at Sculpteo, mouse (body, skull, atlases, brain), and parts of the implant per se (implant, hats, nuts & rings & models of both tips of the fiber-bundle). Some parts relative to staining, trackers and imu boards are available) Similarly, all 3D parts related to the Morj are located in Morj_3D and files relative to Maze 3D models are in Maze_3D .","title":"Home"},{"location":"index.html#commands-and-user-manuals","text":"","title":"Commands and user manuals :"},{"location":"index.html#gui-and-setup-usage","text":"Documents all data relative to the usage of the different blocks of the setup, the options to tune them and what they do.","title":"Gui and setup usage"},{"location":"index.html#software-programmation","text":"","title":"Software programmation"},{"location":"index.html#maze-modules","text":"","title":"Maze modules"},{"location":"index.html#morj-code","text":"","title":"Morj code"},{"location":"index.html#gui-code","text":"","title":"GUI code"},{"location":"index.html#maintenance-and-fabrication","text":"","title":"Maintenance and fabrication"},{"location":"index.html#maze","text":"Contains all info and files realtive to the maze electronics, code and mechanical parts.","title":"Maze"},{"location":"index.html#morj","text":"Contains all info and files realtive to the morj electronics, code and mechanical parts.","title":"MORJ"},{"location":"index.html#genicam-camera","text":"Contains all code and docs about genicam and how widefield monitoring video is captured in python during the session.","title":"Genicam Camera"},{"location":"index.html#sql-database","text":"Contains all documentation of queries, tables, and overall model of the database, as well as some info to deploy a new one if necessary.","title":"SQL database"},{"location":"index.html#all-3d-models-you-want-to-find","text":"TIP : You can acess all repos related to 3D files by typing 3D in the searchfield of the organization. All files related to surgeries are available in the repository Surgeries_3D . This includes parts related to windows (contour, pointing, drawing, and pushers to keep windows in place) as well as flexible \"chambers\" for intrinsic imaging. Some files related to surgeries more specific to the S1 implant are available in the folder below. All files related to the implant are available in the repository Implant_3D . This includes head fixation stuff, files sent for production of metal parts at Sculpteo, mouse (body, skull, atlases, brain), and parts of the implant per se (implant, hats, nuts & rings & models of both tips of the fiber-bundle). Some parts relative to staining, trackers and imu boards are available) Similarly, all 3D parts related to the Morj are located in Morj_3D and files relative to Maze 3D models are in Maze_3D .","title":"All 3D models you want to find"},{"location":"api/morj_api/morj_api.html","text":"program info Input : { i nf o : 1 } type argument value type : ignored Output : Returns information about the program file and date of the code running on the device, for traceability, under the keys : prog_file and prog_date , as strings. handshake Input : { ha n dshake : 1 } type argument value type : ignored Output : Return an handshake acceptation under key accept_handshake as boolean with value True. reboot : Input : { reboo t : 1 } type argument value type : ignored Output : Returns nothing, activates watchdog timer, and wait 15ms that it triggers a software reboot. IMU : get_error: Input : { IMU :{ ge t _error : 1 }} type argument value type : ignored Output : Returns status of the access between microcontroller and IMU. Possible values returned are listed here . If everything is ok, you should get : All is well. Returns a string under the key : IMU_error","title":"MORJ"},{"location":"api/morj_api/morj_api.html#program-info","text":"Input : { i nf o : 1 } type argument value type : ignored Output : Returns information about the program file and date of the code running on the device, for traceability, under the keys : prog_file and prog_date , as strings.","title":"program info"},{"location":"api/morj_api/morj_api.html#handshake","text":"Input : { ha n dshake : 1 } type argument value type : ignored Output : Return an handshake acceptation under key accept_handshake as boolean with value True.","title":"handshake"},{"location":"api/morj_api/morj_api.html#reboot","text":"Input : { reboo t : 1 } type argument value type : ignored Output : Returns nothing, activates watchdog timer, and wait 15ms that it triggers a software reboot.","title":"reboot :"},{"location":"api/morj_api/morj_api.html#imu","text":"","title":"IMU :"},{"location":"api/morj_api/morj_api.html#get_error","text":"Input : { IMU :{ ge t _error : 1 }} type argument value type : ignored Output : Returns status of the access between microcontroller and IMU. Possible values returned are listed here . If everything is ok, you should get : All is well. Returns a string under the key : IMU_error","title":"get_error:"},{"location":"code/maze_modules/modulex.html","text":"Purpose This class is the base class for any module. It principally comprises attributes and methods to access modules by name from json commands (see Maze API section of the documentation). It also allows basic function that can be usefull and common to any module, sensor or actuator alike, such as deactivation / reactivation of the module. Warning This class is not meant to be used alone, but to de derived to actually do something usefull. Example Usage : modulex module_object = modulex ( \"MyModuleName\" ) Constructor : modulex module_object ;","title":"Modulex"},{"location":"code/maze_modules/modulex.html#example-usage","text":"modulex module_object = modulex ( \"MyModuleName\" )","title":"Example Usage :"},{"location":"code/maze_modules/modulex.html#constructor","text":"modulex module_object ;","title":"Constructor :"},{"location":"code/maze_modules/servos.html","text":"Purpose This class is derived from the base modulex class. It is meant to store possible positions a servo can take, and make the process of switching between these positions as easy as possible Example Usage : servo servo_object = servo ( \"MyServoName\" ) Constructor : servo servo_object ;","title":"Servo"},{"location":"code/maze_modules/servos.html#example-usage","text":"servo servo_object = servo ( \"MyServoName\" )","title":"Example Usage :"},{"location":"code/maze_modules/servos.html#constructor","text":"servo servo_object ;","title":"Constructor :"},{"location":"code/maze_modules/waiters.html","text":"Purpose This class is meant to be used as a way to make easier the process of waiting for events in a non blocking way, when the necessity of instantaneous capture of transient events is not required (in which case, the use of hardware interrupts is preferable) Example Usage : Note : static Static is an argument to create a variable that will remain the same between function calls. Static var declaration is run only once so we don't mind putting it inside the \"root\" of the loop function. // loop run code repeatedly void loop () { static waiter waiter_object = waiter ( 1000 , waiter :: millisec , true ); if ( waiter_object ()){ // check if a memo is waiter_object . wait ( 1000 ); Serial . println ( \"DueTime\" ); } } Constructor : waiter waiter_object ; Called","title":"Waiter"},{"location":"code/maze_modules/waiters.html#example-usage","text":"Note : static Static is an argument to create a variable that will remain the same between function calls. Static var declaration is run only once so we don't mind putting it inside the \"root\" of the loop function. // loop run code repeatedly void loop () { static waiter waiter_object = waiter ( 1000 , waiter :: millisec , true ); if ( waiter_object ()){ // check if a memo is waiter_object . wait ( 1000 ); Serial . println ( \"DueTime\" ); } }","title":"Example Usage :"},{"location":"code/maze_modules/waiters.html#constructor","text":"waiter waiter_object ; Called","title":"Constructor :"}]}